# -*- coding: utf-8 -*-\n# Data Integrity Validation Rules for SPC ERPNext System\n# Copyright (c) 2025 SPC System\n\nimport frappe\nfrom frappe import _\nfrom frappe.utils import flt, cint, getdate, now_datetime, add_days\nimport math\nimport statistics\nfrom datetime import datetime, timedelta\n\n# =============================================================================\n# CORE SPC DATA VALIDATION\n# =============================================================================\n\n@frappe.whitelist()\ndef validate_spc_data_point(doc, method=None):\n    \"\"\"Comprehensive validation for SPC Data Point\"\"\"\n    \n    # 1. Validate against specification limits\n    if doc.specification:\n        spec = frappe.get_doc(\"SPC Specification\", doc.specification)\n        value = flt(doc.measurement_value)\n        \n        # Check critical limits\n        if spec.lower_critical_limit and value < flt(spec.lower_critical_limit):\n            frappe.throw(_(\"Measurement {0} is below Lower Critical Limit {1}\").format(\n                value, spec.lower_critical_limit))\n                \n        if spec.upper_critical_limit and value > flt(spec.upper_critical_limit):\n            frappe.throw(_(\"Measurement {0} is above Upper Critical Limit {1}\").format(\n                value, spec.upper_critical_limit))\n    \n    # 2. Validate measurement precision\n    if doc.parameter:\n        parameter = frappe.get_doc(\"SPC Parameter Master\", doc.parameter)\n        if parameter.decimal_precision:\n            precision = cint(parameter.decimal_precision)\n            if len(str(value).split('.')[-1]) > precision:\n                frappe.throw(_(\"Measurement precision exceeds allowed {0} decimal places\").format(precision))\n    \n    # 3. Validate timestamp sequence\n    validate_timestamp_sequence(doc)\n    \n    # 4. Validate operator permissions\n    validate_operator_permissions(doc)\n    \n    # 5. Check for duplicate measurements\n    check_duplicate_measurements(doc)\n\n@frappe.whitelist()\ndef validate_spc_specification(doc, method=None):\n    \"\"\"Validate SPC Specification limits and targets\"\"\"\n    \n    # 1. Validate limit hierarchy\n    limits = {\n        'lower_critical': flt(doc.lower_critical_limit),\n        'lower_warning': flt(doc.lower_warning_limit),\n        'target': flt(doc.target_value),\n        'upper_warning': flt(doc.upper_warning_limit),\n        'upper_critical': flt(doc.upper_critical_limit)\n    }\n    \n    # Check logical sequence\n    if limits['lower_critical'] and limits['lower_warning']:\n        if limits['lower_critical'] > limits['lower_warning']:\n            frappe.throw(_(\"Lower Critical Limit cannot be greater than Lower Warning Limit\"))\n    \n    if limits['lower_warning'] and limits['target']:\n        if limits['lower_warning'] > limits['target']:\n            frappe.throw(_(\"Lower Warning Limit cannot be greater than Target Value\"))\n    \n    if limits['target'] and limits['upper_warning']:\n        if limits['target'] > limits['upper_warning']:\n            frappe.throw(_(\"Target Value cannot be greater than Upper Warning Limit\"))\n    \n    if limits['upper_warning'] and limits['upper_critical']:\n        if limits['upper_warning'] > limits['upper_critical']:\n            frappe.throw(_(\"Upper Warning Limit cannot be greater than Upper Critical Limit\"))\n    \n    # 2. Validate statistical significance\n    if doc.target_value and doc.tolerance:\n        tolerance_range = flt(doc.tolerance)\n        if tolerance_range <= 0:\n            frappe.throw(_(\"Tolerance must be greater than zero\"))\n\n@frappe.whitelist()\ndef validate_spc_alert(doc, method=None):\n    \"\"\"Validate SPC Alert creation and escalation\"\"\"\n    \n    # 1. Validate alert severity based on violation type\n    if doc.data_point:\n        data_point = frappe.get_doc(\"SPC Data Point\", doc.data_point)\n        spec = frappe.get_doc(\"SPC Specification\", data_point.specification)\n        \n        value = flt(data_point.measurement_value)\n        \n        # Determine correct severity\n        if ((spec.lower_critical_limit and value < flt(spec.lower_critical_limit)) or \n            (spec.upper_critical_limit and value > flt(spec.upper_critical_limit))):\n            if doc.severity != \"Critical\":\n                frappe.throw(_(\"Alert severity must be 'Critical' for critical limit violations\"))\n    \n    # 2. Validate escalation timing\n    if doc.status == \"Open\" and not doc.acknowledged_by:\n        created_time = getdate(doc.creation)\n        current_time = getdate(now_datetime())\n        \n        if current_time > add_days(created_time, 1):\n            doc.escalated = 1\n    \n    # 3. Validate acknowledgment requirements\n    if doc.acknowledged and not doc.acknowledged_by:\n        frappe.throw(_(\"Acknowledged by user is required when alert is acknowledged\"))\n\n# =============================================================================\n# STATISTICAL VALIDATION FUNCTIONS\n# =============================================================================\n\n@frappe.whitelist()\ndef calculate_control_limits(parameter, workstation, days=30):\n    \"\"\"Calculate statistical control limits based on historical data\"\"\"\n    \n    # Get historical data points\n    data_points = frappe.get_all(\"SPC Data Point\", \n        filters={\n            \"parameter\": parameter,\n            \"workstation\": workstation,\n            \"creation\": [\">=\", add_days(now_datetime(), -days)]\n        },\n        fields=[\"measurement_value\"],\n        order_by=\"creation desc\"\n    )\n    \n    if len(data_points) < 10:\n        frappe.throw(_(\"Insufficient data points for statistical analysis. Minimum 10 required.\"))\n    \n    values = [flt(dp.measurement_value) for dp in data_points]\n    \n    # Calculate statistical parameters\n    mean = statistics.mean(values)\n    std_dev = statistics.stdev(values)\n    \n    # Calculate control limits (3-sigma)\n    ucl = mean + (3 * std_dev)\n    lcl = mean - (3 * std_dev)\n    \n    return {\n        \"mean\": mean,\n        \"std_dev\": std_dev,\n        \"upper_control_limit\": ucl,\n        \"lower_control_limit\": lcl,\n        \"sample_size\": len(values)\n    }\n\n@frappe.whitelist()\ndef calculate_process_capability(parameter, workstation, specification):\n    \"\"\"Calculate Cp, Cpk values for process capability\"\"\"\n    \n    # Get specification limits\n    spec = frappe.get_doc(\"SPC Specification\", specification)\n    usl = flt(spec.upper_specification_limit)\n    lsl = flt(spec.lower_specification_limit)\n    \n    if not (usl and lsl):\n        frappe.throw(_(\"Both Upper and Lower Specification Limits required for capability calculation\"))\n    \n    # Get recent data (last 100 points or 30 days)\n    data_points = frappe.get_all(\"SPC Data Point\",\n        filters={\n            \"parameter\": parameter,\n            \"workstation\": workstation,\n            \"specification\": specification\n        },\n        fields=[\"measurement_value\"],\n        order_by=\"creation desc\",\n        limit=100\n    )\n    \n    if len(data_points) < 30:\n        frappe.throw(_(\"Insufficient data for process capability. Minimum 30 points required.\"))\n    \n    values = [flt(dp.measurement_value) for dp in data_points]\n    mean = statistics.mean(values)\n    std_dev = statistics.stdev(values)\n    \n    # Calculate capability indices\n    cp = (usl - lsl) / (6 * std_dev)\n    cpu = (usl - mean) / (3 * std_dev)\n    cpl = (mean - lsl) / (3 * std_dev)\n    cpk = min(cpu, cpl)\n    \n    # Calculate Pp and Ppk (performance indices)\n    pp = (usl - lsl) / (6 * std_dev)\n    ppu = (usl - mean) / (3 * std_dev)\n    ppl = (mean - lsl) / (3 * std_dev)\n    ppk = min(ppu, ppl)\n    \n    return {\n        \"cp\": cp,\n        \"cpk\": cpk,\n        \"cpu\": cpu,\n        \"cpl\": cpl,\n        \"pp\": pp,\n        \"ppk\": ppk,\n        \"mean\": mean,\n        \"std_dev\": std_dev,\n        \"sample_size\": len(values)\n    }\n\n# =============================================================================\n# CROSS-DOCTYPE VALIDATION FUNCTIONS\n# =============================================================================\n\ndef validate_timestamp_sequence(doc):\n    \"\"\"Ensure measurement timestamps are in logical sequence\"\"\"\n    \n    if not doc.measurement_datetime:\n        doc.measurement_datetime = now_datetime()\n    \n    # Check for future timestamps\n    if getdate(doc.measurement_datetime) > getdate(now_datetime()):\n        frappe.throw(_(\"Measurement timestamp cannot be in the future\"))\n    \n    # Check for reasonable historical limits (not older than 1 year)\n    one_year_ago = add_days(now_datetime(), -365)\n    if getdate(doc.measurement_datetime) < getdate(one_year_ago):\n        frappe.throw(_(\"Measurement timestamp cannot be older than 1 year\"))\n\ndef validate_operator_permissions(doc):\n    \"\"\"Validate operator has permission to record data for this workstation/parameter\"\"\"\n    \n    if not doc.operator:\n        doc.operator = frappe.session.user\n    \n    # Check if operator has workstation access\n    if doc.workstation:\n        workstation_access = frappe.get_all(\"User Permission\",\n            filters={\n                \"user\": doc.operator,\n                \"allow\": \"Workstation\",\n                \"for_value\": doc.workstation\n            }\n        )\n        \n        if not workstation_access and not frappe.has_permission(\"SPC Data Point\", \"write\"):\n            frappe.throw(_(\"User {0} does not have permission to record data for workstation {1}\").format(\n                doc.operator, doc.workstation))\n\ndef check_duplicate_measurements(doc):\n    \"\"\"Check for duplicate measurements within time tolerance\"\"\"\n    \n    if doc.is_new():\n        # Check for duplicates within 1-minute window\n        start_time = add_to_date(doc.measurement_datetime, minutes=-1)\n        end_time = add_to_date(doc.measurement_datetime, minutes=1)\n        \n        duplicates = frappe.get_all(\"SPC Data Point\",\n            filters={\n                \"parameter\": doc.parameter,\n                \"workstation\": doc.workstation,\n                \"measurement_datetime\": [\"between\", [start_time, end_time]],\n                \"name\": [\"!=\", doc.name]\n            }\n        )\n        \n        if duplicates:\n            frappe.msgprint(_(\"Warning: Similar measurement exists within 1-minute window\"))\n\n# =============================================================================\n# FDA COMPLIANCE VALIDATION\n# =============================================================================\n\n@frappe.whitelist()\ndef validate_electronic_signature(doc, method=None):\n    \"\"\"Validate electronic signature requirements per 21 CFR Part 11\"\"\"\n    \n    # 1. Validate signature components\n    if not doc.signed_by:\n        frappe.throw(_(\"Signed by user is required\"))\n    \n    if not doc.signature_meaning:\n        frappe.throw(_(\"Signature meaning is required\"))\n    \n    if not doc.signature_date:\n        doc.signature_date = now_datetime()\n    \n    # 2. Validate user authentication\n    if doc.signed_by != frappe.session.user:\n        # Verify password if different user\n        if not doc.password_verification:\n            frappe.throw(_(\"Password verification required for cross-user signatures\"))\n    \n    # 3. Validate signature uniqueness\n    existing_signature = frappe.get_all(\"Electronic Signature\",\n        filters={\n            \"document_type\": doc.document_type,\n            \"document_name\": doc.document_name,\n            \"signature_meaning\": doc.signature_meaning,\n            \"name\": [\"!=\", doc.name]\n        }\n    )\n    \n    if existing_signature:\n        frappe.throw(_(\"Electronic signature already exists for this document and meaning\"))\n\n@frappe.whitelist()\ndef validate_deviation(doc, method=None):\n    \"\"\"Validate deviation per FDA requirements\"\"\"\n    \n    # 1. Validate severity classification\n    if doc.severity not in [\"Minor\", \"Major\", \"Critical\"]:\n        frappe.throw(_(\"Invalid severity level. Must be Minor, Major, or Critical\"))\n    \n    # 2. Validate investigation timeline\n    if doc.status == \"Under Investigation\":\n        if not doc.investigation_start_date:\n            doc.investigation_start_date = now_datetime()\n        \n        # Critical deviations must be investigated within 24 hours\n        if doc.severity == \"Critical\":\n            created_time = getdate(doc.creation)\n            investigate_time = getdate(doc.investigation_start_date)\n            \n            if (investigate_time - created_time).days > 1:\n                frappe.throw(_(\"Critical deviations must be investigated within 24 hours\"))\n    \n    # 3. Validate team assignment for major/critical deviations\n    if doc.severity in [\"Major\", \"Critical\"]:\n        if not doc.team_members:\n            frappe.throw(_(\"Investigation team required for {0} severity deviations\").format(doc.severity))\n\n# =============================================================================\n# AUTOMATION VALIDATION\n# =============================================================================\n\n@frappe.whitelist()\ndef validate_bot_data_entry(doc, method=None):\n    \"\"\"Validate data entry from bot users\"\"\"\n    \n    if frappe.session.user.endswith(\"_bot\"):\n        # 1. Validate bot authentication\n        bot_config = frappe.get_all(\"Bot User Configuration\",\n            filters={\"user\": frappe.session.user, \"is_active\": 1}\n        )\n        \n        if not bot_config:\n            frappe.throw(_(\"Bot user not configured or inactive\"))\n        \n        # 2. Validate API rate limits\n        validate_api_rate_limit(frappe.session.user)\n        \n        # 3. Validate data format for automated entry\n        if doc.doctype == \"SPC Data Point\":\n            if not doc.measurement_source:\n                doc.measurement_source = \"Automated\"\n            \n            # Validate measurement precision for automated systems\n            if doc.measurement_precision and flt(doc.measurement_precision) > 0.001:\n                frappe.msgprint(_(\"Warning: Automated measurement precision may be too low\"))\n\ndef validate_api_rate_limit(user):\n    \"\"\"Validate API rate limits for bot users\"\"\"\n    \n    # Check requests in last minute\n    one_minute_ago = add_to_date(now_datetime(), minutes=-1)\n    \n    recent_requests = frappe.get_all(\"SPC Audit Trail\",\n        filters={\n            \"user\": user,\n            \"creation\": [\">=\", one_minute_ago],\n            \"action\": \"Insert\"\n        }\n    )\n    \n    # Limit to 60 requests per minute for bot users\n    if len(recent_requests) > 60:\n        frappe.throw(_(\"API rate limit exceeded. Maximum 60 requests per minute.\"))\n\n# =============================================================================\n# UTILITY FUNCTIONS\n# =============================================================================\n\ndef add_to_date(date, years=0, months=0, days=0, hours=0, minutes=0, seconds=0):\n    \"\"\"Utility function to add time to date\"\"\"\n    from dateutil.relativedelta import relativedelta\n    \n    if isinstance(date, str):\n        date = datetime.strptime(date, \"%Y-%m-%d %H:%M:%S\")\n    \n    return date + relativedelta(years=years, months=months, days=days, \n                               hours=hours, minutes=minutes, seconds=seconds)\n\n@frappe.whitelist()\ndef get_validation_summary():\n    \"\"\"Get summary of validation rules applied\"\"\"\n    \n    return {\n        \"validation_rules\": {\n            \"SPC Data Point\": [\"Specification limits\", \"Precision\", \"Timestamp sequence\", \"Operator permissions\", \"Duplicates\"],\n            \"SPC Specification\": [\"Limit hierarchy\", \"Statistical significance\"],\n            \"SPC Alert\": [\"Severity validation\", \"Escalation timing\", \"Acknowledgment\"],\n            \"Electronic Signature\": [\"21 CFR Part 11 compliance\", \"Authentication\", \"Uniqueness\"],\n            \"Deviation\": [\"FDA requirements\", \"Timeline validation\", \"Team assignment\"]\n        },\n        \"statistical_functions\": [\"Control limits calculation\", \"Process capability (Cp, Cpk)\"],\n        \"compliance_features\": [\"Audit trail\", \"Electronic signatures\", \"Data integrity\"],\n        \"automation_controls\": [\"Bot authentication\", \"API rate limiting\", \"Data format validation\"]\n    }\n