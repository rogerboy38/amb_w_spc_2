// Enhanced Batch Navbar Widget - Multi-Company, Multi-Plant, Multi-Batch Support\n// With 15-minute refresh cycle and snooze/sleep/active states\n// Save this as: public/js/batch_navbar_widget.js\n\n// Use proper Frappe event handling\nfrappe.provide('frappe.ui');\nfrappe.provide('amb.batch_widget');\n\n// Configuration with updated refresh interval and widget states\namb.batch_widget.config = {\n    refreshInterval: 900000,  // 15 minutes (15 * 60 * 1000 ms)\n    autoMinimizeDelay: 45000, // 45 seconds\n    widgetWidth: 500,\n    snoozeTime: 3600000,      // 1 hour snooze\n    sleepTime: 14400000,      // 4 hours sleep\n    plantColors: {\n        '1': '#3498db', // Mix Plant - Blue\n        '2': '#e74c3c', // Dry Plant - Red\n        '3': '#2ecc71', // Juice Plant - Green\n        '4': '#f39c12', // Laboratory - Orange\n        '5': '#9b59b6'  // Formulated Plant - Purple\n    },\n    companyColors: {\n        'AMB-Wellness': '#1abc9c',\n        'Juice': '#3498db'\n    },\n    plantNames: {\n        '1': 'Mix Plant',\n        '2': 'Dry Plant', \n        '3': 'Juice Plant',\n        '4': 'Laboratory',\n        '5': 'Formulated Plant'\n    }\n};\n\n// Widget state management\namb.batch_widget.state = {\n    current: 'active',  // active, snooze, sleep\n    lastUpdate: null,\n    snoozeUntil: null,\n    sleepUntil: null,\n    refreshTimer: null,\n    isMinimized: false,\n    autoMinimizeTimer: null\n};\n\n// Initialize when page loads\n$(document).ready(function() {\n    initializeBatchWidget();\n});\n\n// Widget initialization\nfunction initializeBatchWidget() {\n    if (!frappe.user.has_role(['System Manager', 'Manufacturing Manager', 'Manufacturing User'])) {\n        return; // Only show for authorized users\n    }\n    \n    // Restore widget state from localStorage\n    restoreWidgetState();\n    \n    // Create widget container\n    createWidgetContainer();\n    \n    // Setup widget controls\n    setupWidgetControls();\n    \n    // Start refresh cycle based on current state\n    manageRefreshCycle();\n    \n    // Setup real-time event listeners\n    setupRealtimeEvents();\n    \n    console.log('Enhanced Batch Widget initialized with 15-minute refresh cycle');\n}\n\n// Create the main widget container\nfunction createWidgetContainer() {\n    // Remove existing widget if present\n    $('#batch-widget-container').remove();\n    \n    const widgetHtml = `\n        <div id=\"batch-widget-container\" class=\"batch-widget-container\" style=\"display: none;\">\n            <div class=\"batch-widget-header\">\n                <div class=\"batch-widget-title\">\n                    <i class=\"fa fa-sitemap\"></i>\n                    <span>Batch Monitor</span>\n                    <span class=\"batch-widget-status\" id=\"widget-status-indicator\"></span>\n                </div>\n                <div class=\"batch-widget-controls\">\n                    <div class=\"batch-widget-actions\">\n                        <button class=\"btn btn-xs btn-success\" id=\"widget-active\" title=\"Active (15-min refresh)\">\n                            <i class=\"fa fa-play\"></i>\n                        </button>\n                        <button class=\"btn btn-xs btn-warning\" id=\"widget-snooze\" title=\"Snooze (1 hour)\">\n                            <i class=\"fa fa-pause\"></i>\n                        </button>\n                        <button class=\"btn btn-xs btn-danger\" id=\"widget-sleep\" title=\"Sleep (4 hours)\">\n                            <i class=\"fa fa-bed\"></i>\n                        </button>\n                    </div>\n                    <div class=\"batch-widget-nav\">\n                        <button class=\"btn btn-xs btn-default\" id=\"widget-minimize\" title=\"Minimize\">\n                            <i class=\"fa fa-minus\"></i>\n                        </button>\n                        <button class=\"btn btn-xs btn-default\" id=\"widget-close\" title=\"Close\">\n                            <i class=\"fa fa-times\"></i>\n                        </button>\n                    </div>\n                </div>\n            </div>\n            <div class=\"batch-widget-content\" id=\"batch-widget-content\">\n                <div class=\"batch-widget-loading\">\n                    <i class=\"fa fa-spinner fa-spin\"></i> Loading batch data...\n                </div>\n            </div>\n            <div class=\"batch-widget-footer\">\n                <div class=\"batch-widget-timestamp\" id=\"widget-last-update\">\n                    Last updated: Never\n                </div>\n                <div class=\"batch-widget-next-refresh\" id=\"widget-next-refresh\">\n                    Next refresh: --\n                </div>\n            </div>\n        </div>\n    `;\n    \n    // Append to navbar or create floating widget\n    if ($('.navbar-right').length) {\n        $('.navbar-right').prepend(widgetHtml);\n    } else {\n        $('body').append(widgetHtml);\n        $('#batch-widget-container').addClass('floating-widget');\n    }\n    \n    // Apply CSS styles\n    applyWidgetStyles();\n    \n    // Show widget based on current state\n    updateWidgetVisibility();\n}\n\n// Setup widget control event handlers\nfunction setupWidgetControls() {\n    // Active state button\n    $('#widget-active').on('click', function() {\n        setWidgetState('active');\n    });\n    \n    // Snooze button\n    $('#widget-snooze').on('click', function() {\n        setWidgetState('snooze');\n    });\n    \n    // Sleep button\n    $('#widget-sleep').on('click', function() {\n        setWidgetState('sleep');\n    });\n    \n    // Minimize/expand button\n    $('#widget-minimize').on('click', function() {\n        toggleWidgetMinimize();\n    });\n    \n    // Close button\n    $('#widget-close').on('click', function() {\n        $('#batch-widget-container').hide();\n        saveWidgetState();\n    });\n    \n    // Auto-minimize timer setup\n    $('#batch-widget-container').on('mouseenter', function() {\n        clearAutoMinimizeTimer();\n    }).on('mouseleave', function() {\n        if (!amb.batch_widget.state.isMinimized) {\n            startAutoMinimizeTimer();\n        }\n    });\n}\n\n// Widget state management functions\nfunction setWidgetState(newState) {\n    const now = Date.now();\n    \n    // Clear existing timers\n    clearRefreshTimer();\n    clearAutoMinimizeTimer();\n    \n    // Update state\n    amb.batch_widget.state.current = newState;\n    \n    switch (newState) {\n        case 'active':\n            amb.batch_widget.state.snoozeUntil = null;\n            amb.batch_widget.state.sleepUntil = null;\n            break;\n            \n        case 'snooze':\n            amb.batch_widget.state.snoozeUntil = now + amb.batch_widget.config.snoozeTime;\n            amb.batch_widget.state.sleepUntil = null;\n            break;\n            \n        case 'sleep':\n            amb.batch_widget.state.sleepUntil = now + amb.batch_widget.config.sleepTime;\n            amb.batch_widget.state.snoozeUntil = null;\n            break;\n    }\n    \n    // Update UI\n    updateWidgetStateButtons();\n    updateWidgetVisibility();\n    updateStatusIndicator();\n    \n    // Restart refresh cycle\n    manageRefreshCycle();\n    \n    // Save state\n    saveWidgetState();\n    \n    // Show notification\n    frappe.show_alert({\n        message: `Batch widget ${newState}`,\n        indicator: newState === 'active' ? 'green' : newState === 'snooze' ? 'orange' : 'red'\n    });\n}\n\n// Manage refresh cycle based on current state\nfunction manageRefreshCycle() {\n    clearRefreshTimer();\n    \n    const now = Date.now();\n    \n    // Check if we should wake up from snooze or sleep\n    if (amb.batch_widget.state.snoozeUntil && now >= amb.batch_widget.state.snoozeUntil) {\n        setWidgetState('active');\n        return;\n    }\n    \n    if (amb.batch_widget.state.sleepUntil && now >= amb.batch_widget.state.sleepUntil) {\n        setWidgetState('active');\n        return;\n    }\n    \n    // Start refresh timer based on current state\n    if (amb.batch_widget.state.current === 'active') {\n        startRefreshTimer();\n    } else {\n        // For snooze/sleep, check periodically if we should wake up\n        amb.batch_widget.state.refreshTimer = setTimeout(() => {\n            manageRefreshCycle();\n        }, 60000); // Check every minute\n    }\n    \n    updateNextRefreshTime();\n}\n\n// Start the refresh timer\nfunction startRefreshTimer() {\n    amb.batch_widget.state.refreshTimer = setTimeout(() => {\n        if (amb.batch_widget.state.current === 'active') {\n            refreshBatchData();\n        }\n        manageRefreshCycle(); // Schedule next refresh\n    }, amb.batch_widget.config.refreshInterval);\n}\n\n// Clear refresh timer\nfunction clearRefreshTimer() {\n    if (amb.batch_widget.state.refreshTimer) {\n        clearTimeout(amb.batch_widget.state.refreshTimer);\n        amb.batch_widget.state.refreshTimer = null;\n    }\n}\n\n// Auto-minimize functionality\nfunction startAutoMinimizeTimer() {\n    clearAutoMinimizeTimer();\n    amb.batch_widget.state.autoMinimizeTimer = setTimeout(() => {\n        if (!amb.batch_widget.state.isMinimized) {\n            minimizeWidget();\n        }\n    }, amb.batch_widget.config.autoMinimizeDelay);\n}\n\nfunction clearAutoMinimizeTimer() {\n    if (amb.batch_widget.state.autoMinimizeTimer) {\n        clearTimeout(amb.batch_widget.state.autoMinimizeTimer);\n        amb.batch_widget.state.autoMinimizeTimer = null;\n    }\n}\n\nfunction toggleWidgetMinimize() {\n    if (amb.batch_widget.state.isMinimized) {\n        expandWidget();\n    } else {\n        minimizeWidget();\n    }\n}\n\nfunction minimizeWidget() {\n    $('#batch-widget-content').slideUp(200);\n    $('#batch-widget-footer').slideUp(200);\n    $('#widget-minimize i').removeClass('fa-minus').addClass('fa-plus');\n    $('#widget-minimize').attr('title', 'Expand');\n    amb.batch_widget.state.isMinimized = true;\n    clearAutoMinimizeTimer();\n}\n\nfunction expandWidget() {\n    $('#batch-widget-content').slideDown(200);\n    $('#batch-widget-footer').slideDown(200);\n    $('#widget-minimize i').removeClass('fa-plus').addClass('fa-minus');\n    $('#widget-minimize').attr('title', 'Minimize');\n    amb.batch_widget.state.isMinimized = false;\n    startAutoMinimizeTimer();\n}\n\n// Update widget visibility based on state\nfunction updateWidgetVisibility() {\n    const container = $('#batch-widget-container');\n    \n    if (amb.batch_widget.state.current === 'active') {\n        container.show();\n        if (!amb.batch_widget.state.isMinimized) {\n            startAutoMinimizeTimer();\n        }\n    } else {\n        container.hide();\n    }\n}\n\n// Update state indicator buttons\nfunction updateWidgetStateButtons() {\n    // Reset all buttons\n    $('.batch-widget-actions .btn').removeClass('active');\n    \n    // Highlight current state\n    switch (amb.batch_widget.state.current) {\n        case 'active':\n            $('#widget-active').addClass('active');\n            break;\n        case 'snooze':\n            $('#widget-snooze').addClass('active');\n            break;\n        case 'sleep':\n            $('#widget-sleep').addClass('active');\n            break;\n    }\n}\n\n// Update status indicator\nfunction updateStatusIndicator() {\n    const indicator = $('#widget-status-indicator');\n    const state = amb.batch_widget.state.current;\n    \n    indicator.removeClass('status-active status-snooze status-sleep');\n    indicator.addClass(`status-${state}`);\n    \n    let statusText = '';\n    if (state === 'snooze' && amb.batch_widget.state.snoozeUntil) {\n        const remaining = Math.ceil((amb.batch_widget.state.snoozeUntil - Date.now()) / 60000);\n        statusText = `Snooze (${remaining}m)`;\n    } else if (state === 'sleep' && amb.batch_widget.state.sleepUntil) {\n        const remaining = Math.ceil((amb.batch_widget.state.sleepUntil - Date.now()) / 60000);\n        statusText = `Sleep (${remaining}m)`;\n    } else {\n        statusText = state.charAt(0).toUpperCase() + state.slice(1);\n    }\n    \n    indicator.text(statusText);\n}\n\n// Update next refresh time display\nfunction updateNextRefreshTime() {\n    const nextRefreshElement = $('#widget-next-refresh');\n    \n    if (amb.batch_widget.state.current === 'active') {\n        const nextRefresh = new Date(Date.now() + amb.batch_widget.config.refreshInterval);\n        nextRefreshElement.text(`Next refresh: ${nextRefresh.toLocaleTimeString()}`);\n    } else if (amb.batch_widget.state.current === 'snooze' && amb.batch_widget.state.snoozeUntil) {\n        const wakeUp = new Date(amb.batch_widget.state.snoozeUntil);\n        nextRefreshElement.text(`Wake up: ${wakeUp.toLocaleTimeString()}`);\n    } else if (amb.batch_widget.state.current === 'sleep' && amb.batch_widget.state.sleepUntil) {\n        const wakeUp = new Date(amb.batch_widget.state.sleepUntil);\n        nextRefreshElement.text(`Wake up: ${wakeUp.toLocaleTimeString()}`);\n    } else {\n        nextRefreshElement.text('--');\n    }\n}\n\n// Refresh batch data\nfunction refreshBatchData() {\n    amb.batch_widget.state.lastUpdate = new Date();\n    \n    // Update timestamp\n    $('#widget-last-update').text(`Last updated: ${amb.batch_widget.state.lastUpdate.toLocaleTimeString()}`);\n    \n    // Fetch batch data\n    frappe.call({\n        method: 'batch_management.batch_management.doctype.batch_amb.batch_amb.get_batch_tree_data',\n        callback: function(r) {\n            if (r.message) {\n                updateBatchDisplay(r.message);\n            }\n        },\n        error: function(err) {\n            console.error('Error fetching batch data:', err);\n            $('#batch-widget-content').html('<div class=\"text-danger\">Error loading data</div>');\n        }\n    });\n    \n    // Update status indicator periodically\n    updateStatusIndicator();\n    updateNextRefreshTime();\n}\n\n// Update batch display\nfunction updateBatchDisplay(batchData) {\n    let content = '';\n    \n    Object.keys(batchData).forEach(plant => {\n        const batches = batchData[plant];\n        const plantColor = getPlantColor(plant);\n        \n        if (batches && batches.length > 0) {\n            content += `\n                <div class=\"plant-section\" style=\"border-left: 4px solid ${plantColor}; margin-bottom: 10px; padding-left: 8px;\">\n                    <div class=\"plant-header\" style=\"font-weight: bold; color: ${plantColor};\">\n                        ${plant} (${batches.length})\n                    </div>\n                    <div class=\"batch-list\">\n            `;\n            \n            // Group batches by level\n            const batchesByLevel = {};\n            batches.forEach(batch => {\n                const level = batch.custom_batch_level || '1';\n                if (!batchesByLevel[level]) batchesByLevel[level] = [];\n                batchesByLevel[level].push(batch);\n            });\n            \n            // Display batches by level\n            Object.keys(batchesByLevel).sort().forEach(level => {\n                const levelBatches = batchesByLevel[level];\n                const levelName = ['', 'Lots', 'Sub Lots', 'Containers', 'Barrels'][parseInt(level)];\n                \n                content += `<div class=\"level-group\">`;\n                content += `<div class=\"level-header\" style=\"font-size: 11px; color: #666; margin-top: 5px;\">${levelName} (${levelBatches.length})</div>`;\n                \n                levelBatches.forEach(batch => {\n                    const statusClass = getStatusClass(batch.quality_status);\n                    content += `\n                        <div class=\"batch-item\" style=\"font-size: 10px; margin: 2px 0; padding: 2px 4px; background: #f9f9f9; border-radius: 2px;\">\n                            <span class=\"batch-code\" style=\"font-weight: 500;\">${batch.batch_code}</span>\n                            <span class=\"batch-status ${statusClass}\" style=\"float: right; font-size: 9px;\">${batch.quality_status}</span>\n                        </div>\n                    `;\n                });\n                \n                content += `</div>`;\n            });\n            \n            content += `</div></div>`;\n        }\n    });\n    \n    if (!content) {\n        content = '<div class=\"text-muted\" style=\"text-align: center; padding: 20px;\">No batch data available</div>';\n    }\n    \n    $('#batch-widget-content').html(content);\n}\n\n// Helper functions\nfunction getPlantColor(plantName) {\n    const plantMap = {\n        'Mix Plant': amb.batch_widget.config.plantColors['1'],\n        'Dry Plant': amb.batch_widget.config.plantColors['2'], \n        'Juice Plant': amb.batch_widget.config.plantColors['3'],\n        'Laboratory': amb.batch_widget.config.plantColors['4'],\n        'Formulated Plant': amb.batch_widget.config.plantColors['5']\n    };\n    return plantMap[plantName] || '#666';\n}\n\nfunction getStatusClass(status) {\n    const statusMap = {\n        'Pending': 'text-warning',\n        'Passed': 'text-success', \n        'Failed': 'text-danger',\n        'Hold': 'text-muted'\n    };\n    return statusMap[status] || 'text-muted';\n}\n\n// State persistence\nfunction saveWidgetState() {\n    const stateData = {\n        current: amb.batch_widget.state.current,\n        snoozeUntil: amb.batch_widget.state.snoozeUntil,\n        sleepUntil: amb.batch_widget.state.sleepUntil,\n        isMinimized: amb.batch_widget.state.isMinimized,\n        lastUpdate: amb.batch_widget.state.lastUpdate\n    };\n    localStorage.setItem('batch_widget_state', JSON.stringify(stateData));\n}\n\nfunction restoreWidgetState() {\n    const savedState = localStorage.getItem('batch_widget_state');\n    if (savedState) {\n        try {\n            const stateData = JSON.parse(savedState);\n            Object.assign(amb.batch_widget.state, stateData);\n            \n            // Validate times\n            const now = Date.now();\n            if (amb.batch_widget.state.snoozeUntil && amb.batch_widget.state.snoozeUntil <= now) {\n                amb.batch_widget.state.snoozeUntil = null;\n                amb.batch_widget.state.current = 'active';\n            }\n            if (amb.batch_widget.state.sleepUntil && amb.batch_widget.state.sleepUntil <= now) {\n                amb.batch_widget.state.sleepUntil = null;\n                amb.batch_widget.state.current = 'active';\n            }\n        } catch (e) {\n            console.warn('Failed to restore widget state:', e);\n        }\n    }\n}\n\n// Real-time event setup\nfunction setupRealtimeEvents() {\n    frappe.realtime.on('batch_widget_update', function(data) {\n        if (amb.batch_widget.state.current === 'active') {\n            refreshBatchData();\n        }\n    });\n    \n    frappe.realtime.on('batch_created', function(data) {\n        if (amb.batch_widget.state.current === 'active') {\n            frappe.show_alert({\n                message: `New batch created: ${data.batch_code}`,\n                indicator: 'green'\n            });\n            refreshBatchData();\n        }\n    });\n}\n\n// CSS Styles\nfunction applyWidgetStyles() {\n    const styles = `\n        <style>\n        .batch-widget-container {\n            position: fixed;\n            top: 60px;\n            right: 10px;\n            width: 500px;\n            background: white;\n            border: 1px solid #ddd;\n            border-radius: 6px;\n            box-shadow: 0 2px 10px rgba(0,0,0,0.1);\n            z-index: 1050;\n            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n        }\n        \n        .batch-widget-header {\n            background: #f8f9fa;\n            border-bottom: 1px solid #dee2e6;\n            padding: 8px 12px;\n            display: flex;\n            justify-content: space-between;\n            align-items: center;\n            border-radius: 6px 6px 0 0;\n        }\n        \n        .batch-widget-title {\n            font-weight: 600;\n            font-size: 13px;\n            color: #495057;\n            display: flex;\n            align-items: center;\n            gap: 8px;\n        }\n        \n        .batch-widget-status {\n            font-size: 10px;\n            padding: 2px 6px;\n            border-radius: 10px;\n            font-weight: 500;\n        }\n        \n        .status-active { background: #d4edda; color: #155724; }\n        .status-snooze { background: #fff3cd; color: #856404; }\n        .status-sleep { background: #f8d7da; color: #721c24; }\n        \n        .batch-widget-controls {\n            display: flex;\n            gap: 8px;\n        }\n        \n        .batch-widget-actions {\n            display: flex;\n            gap: 2px;\n        }\n        \n        .batch-widget-nav {\n            display: flex;\n            gap: 2px;\n        }\n        \n        .batch-widget-content {\n            max-height: 400px;\n            overflow-y: auto;\n            padding: 10px;\n            font-size: 12px;\n        }\n        \n        .batch-widget-footer {\n            background: #f8f9fa;\n            border-top: 1px solid #dee2e6;\n            padding: 6px 12px;\n            display: flex;\n            justify-content: space-between;\n            font-size: 10px;\n            color: #6c757d;\n            border-radius: 0 0 6px 6px;\n        }\n        \n        .batch-widget-loading {\n            text-align: center;\n            padding: 20px;\n            color: #6c757d;\n        }\n        \n        .plant-section {\n            margin-bottom: 12px;\n        }\n        \n        .plant-header {\n            font-size: 12px;\n            margin-bottom: 6px;\n        }\n        \n        .level-header {\n            margin: 4px 0 2px 0;\n            font-weight: 500;\n        }\n        \n        .batch-item {\n            display: flex;\n            justify-content: space-between;\n            align-items: center;\n        }\n        \n        .floating-widget {\n            position: fixed !important;\n        }\n        \n        .batch-widget-actions .btn.active {\n            box-shadow: inset 0 2px 4px rgba(0,0,0,0.2);\n        }\n        </style>\n    `;\n    \n    if (!$('#batch-widget-styles').length) {\n        $('head').append(styles);\n    }\n}\n\n// Public API\namb.batch_widget.refresh_data = refreshBatchData;\namb.batch_widget.set_state = setWidgetState;\namb.batch_widget.show = function() {\n    $('#batch-widget-container').show();\n};\namb.batch_widget.hide = function() {\n    $('#batch-widget-container').hide();\n};\n\n// Initialize widget when this script loads\nif (document.readyState === 'loading') {\n    document.addEventListener('DOMContentLoaded', initializeBatchWidget);\n} else {\n    initializeBatchWidget();\n}\n\nconsole.log('Enhanced Batch Navbar Widget loaded with 15-minute refresh and state management');\n